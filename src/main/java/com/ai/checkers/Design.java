/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ai.checkers;

import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JPanel;
import com.ai.checkers.Board;
import java.awt.Color;
import static com.ai.checkers.Piece.*;
import static com.ai.checkers.Design.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author goyal
 */
class visual extends JPanel {

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D gg = (Graphics2D) g;
//        Creating Grid
        int rows = 400;
        int columns = 400;
        int increase = rows / 8;
//        Vertical Lines         
        for (int i = 0; i <= 400; i += increase) {
            gg.drawLine(i, 0, i, 400);

        }
//        Horizontal Lines         
        for (int i = 0; i <= 400; i += increase) {
            gg.drawLine(0, i, 400, i);
        }
//        Initial Board

        for (int i = 0; i < 8; i++) {
            int flag = i % 2;
            for (int j = 0; j < 8; j++) {
                if (flag == 0) {
                    gg.setColor(Color.BLACK);
                    gg.fillRect(i * 50, j * 50, 50, 50);
                }
                flag = 1 - flag;
            }
        }

        Design.Checker.Team1.forEach(a -> {
            gg.setColor(Color.RED);
            gg.fillOval(a.column * 50 + 25 - 12, a.row * 50 + 25 - 12, 24, 24);
            if (a.king == 1) {
                gg.setColor(Color.orange);
                gg.fillOval(a.column * 50 + 25 - 5, a.row * 50 + 25 - 5, 10, 10);
            }
        });

        Design.Checker.Team2.forEach(a -> {
            gg.setColor(Color.green);
            gg.fillOval(a.column * 50 + 25 - 12, a.row * 50 + 25 - 12, 24, 24);
            if (a.king == 1) {
                gg.setColor(Color.orange);
                gg.fillOval(a.column * 50 + 25 - 5, a.row * 50 + 25 - 5, 10, 10);
            }
        });

        if (selected == 1) {
            gg.setColor(Color.ORANGE);
            gg.drawOval(Chosen.column * 50 + 25 - 14, Chosen.row * 50 + 25 - 14, 28, 28);
            gg.setColor(Color.RED);
            for (moves a : Chosen.Kill) {
                gg.drawOval(a.y * 50 + 25 - 14, a.x * 50 + 25 - 14, 28, 28);
            }
            gg.setColor(Color.WHITE);
            for (moves a : Chosen.Move) {
                gg.drawOval(a.y * 50 + 25 - 14, a.x * 50 + 25 - 14, 28, 28);
            }
        }

    }

}

public class Design extends javax.swing.JFrame {

    public static Board Checker;
    public static int selected = 0;
    public static Piece Chosen;
    public static int row = 0;
    public static int column = 0;
    public static int turn = 0;
    public String Mes[];

    /**
     * Creates new form Design
     */
    public Design() {
        Checker = new Board();
        Mes = new String[2];
        Mes[0] = "Red";
        Mes[1] = "Green";

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        visual Checker_Board;
        Checker_Board = new visual();
        Message = new javax.swing.JLabel();
        AI_Button = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Checker_Board.setBackground(java.awt.Color.white);
        Checker_Board.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Checker_Board.setToolTipText("");
        Checker_Board.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Checker_Board.setPreferredSize(new java.awt.Dimension(400, 400));
        Checker_Board.setRequestFocusEnabled(false);
        Checker_Board.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Checker_BoardMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout Checker_BoardLayout = new javax.swing.GroupLayout(Checker_Board);
        Checker_Board.setLayout(Checker_BoardLayout);
        Checker_BoardLayout.setHorizontalGroup(
            Checker_BoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        Checker_BoardLayout.setVerticalGroup(
            Checker_BoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        Message.setBackground(java.awt.Color.lightGray);
        Message.setFont(new java.awt.Font("Ubuntu", 3, 20)); // NOI18N
        Message.setForeground(java.awt.Color.red);
        Message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Message.setText("Checkers Game : Turn Red");

        AI_Button.setFont(new java.awt.Font("URW Bookman L", 3, 18)); // NOI18N
        AI_Button.setForeground(java.awt.Color.red);
        AI_Button.setText("Red AI Assistant");
        AI_Button.setToolTipText("");
        AI_Button.setEnabled(false);
        AI_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AI_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Checker_Board, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(AI_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(Checker_Board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(AI_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void init() {

        if (Checker.Team1.isEmpty()) {
            Message.setText("Green Wins the Game");
            Checker_Board.setEnabled(false);
            AI_Button.setEnabled(false);
        } else {
            if (Checker.Team2.isEmpty()) {
                Message.setText("Red Wins the Game");
                Checker_Board.setEnabled(false);
                AI_Button.setEnabled(false);

            }
        }

        selected = 0;
        Chosen = null;
        AI_Button.setEnabled(false);
        if (turn == 0) {
            AI_Button.setEnabled(true);
        }

        Message.setText("Checkers Game : Turn " + Mes[turn]);
        repaint();

    }

    public ArrayList<moves> Move(Piece Chosen, Board Checker) {
        Chosen.Move = new ArrayList<>();

        if (Chosen.up == 1) {
            int a = Chosen.row;
            int b = Chosen.column;
            if (a - 1 >= 0) {
                if (b - 1 >= 0 && Checker.Occupied[a - 1][b - 1] == 0) {
                    Chosen.Move.add(new moves(a - 1, b - 1));
                }
                if (b + 1 < 8 && Checker.Occupied[a - 1][b + 1] == 0) {
                    Chosen.Move.add(new moves(a - 1, b + 1));
                }
            }
        }
        if (Chosen.down == 1) {
            int a = Chosen.row;
            int b = Chosen.column;
            if (a + 1 < 8) {
                if (b - 1 >= 0 && Checker.Occupied[a + 1][b - 1] == 0) {
                    Chosen.Move.add(new moves(a + 1, b - 1));
                }
                if (b + 1 < 8 && Checker.Occupied[a + 1][b + 1] == 0) {
                    Chosen.Move.add(new moves(a + 1, b + 1));
                }
            }
        }

        System.out.println("asdfa" + Chosen.Move.size());
        for (moves a : Chosen.Move) {
            System.out.println(a.x + " " + a.y);
        }
        return Chosen.Move;
    }

    public ArrayList<moves> Kill(Piece Chosen, Board Checker) {

        int opp = 1;
        if (turn == 1) {
            opp = 0;
        }
        Chosen.Kill = new ArrayList<>();
        if (Chosen.up == 1) {
            int a = Chosen.row;
            int b = Chosen.column;
            if (a - 1 >= 0) {
                if (b - 1 >= 0 && Checker.Occupied[a - 1][b - 1] == opp + 1) {
                    if (a - 2 >= 0 && b - 2 >= 0 && Checker.Occupied[a - 2][b - 2] == 0) {
                        Chosen.Kill.add(new moves(a - 2, b - 2));
                    }
                }
                if (b + 1 < 8 && Checker.Occupied[a - 1][b + 1] == opp + 1) {
                    if (a - 2 >= 0 && b + 2 < 8 && Checker.Occupied[a - 2][b + 2] == 0) {
                        Chosen.Kill.add(new moves(a - 2, b + 2));

                    }
                }
            }
        }
        if (Chosen.down == 1) {
            int a = Chosen.row;
            int b = Chosen.column;
            if (a + 1 < 8) {
                if (b - 1 >= 0 && Checker.Occupied[a + 1][b - 1] == opp + 1) {
                    if (a + 2 < 8 && b - 2 >= 0 && Checker.Occupied[a + 2][b - 2] == 0) {
                        Chosen.Kill.add(new moves(a + 2, b - 2));
                    }
                }
                if (b + 1 < 8 && Checker.Occupied[a + 1][b + 1] == opp + 1) {
                    if (a + 2 < 8 && b + 2 < 8 && Checker.Occupied[a + 2][b + 2] == 0) {
                        Chosen.Kill.add(new moves(a + 2, b + 2));
                    }
                }
            }
        }
        return Chosen.Kill;
    }

    public int Heuristic(Board Checker) {
        int king_1 = 0;
        int king_2 = 0;
        int safe_1 = 0;
        int safe_2 = 0;
        int kill_1 = 0;
        int kill_2 = 0;
        int move_1 = 0;
        int move_2 = 0;
        int player_1 = 0;
        int player_2 = 0;
        int c_1 = 0;
        int c_2 = 0;

        for (Piece a : Checker.Team1) {
            c_1++;
            if (a.king == 1) {
                king_1 += 10;
            }
            kill_1 = kill_1 + (2) * Kill(a, Checker).size();
            if (a.column > 4) {
                player_1 += 7;
            } else {
                player_1 += 5;
            }
            if (a.column == 0 || a.column == 7 || a.row == 0 || a.row == 7) {
                safe_1++;
                king_1 = -2;
            }
        }
        for (Piece a : Checker.Team2) {
            c_2++;
            if (a.king == 1) {
                king_2 += 10;
            }
            kill_2 = kill_2 + (2) * Kill(a, Checker).size();
            if (a.column <= 4) {
                player_2 += 7;
            } else {
                player_2 += 5;
            }
            if (a.column == 0 || a.column == 7 || a.row == 0 || a.row == 7) {
                safe_2++;
                king_2 = -2;
            }

        }
        if (Checker.Team2.isEmpty() || Checker.Team2.isEmpty()) {
            return Integer.MAX_VALUE;
        }
        if (Checker.Team1.isEmpty() || Checker.Team1.isEmpty()) {
            return Integer.MIN_VALUE;
        }

        return (player_1 + king_1 + safe_1 + (kill_1 / c_1)) - (player_2 + king_2 + safe_2 + (kill_2 / c_2));
    }

    public int Min(int alpha, int beta, int depth, Board Checker) {
        System.out.println("MIN");
        if (depth <= 0) {
            return Heuristic(new Board(Checker));
        }
        int value = Integer.MAX_VALUE;
        for (Piece a : Checker.Team2) {
            Piece temp = new Piece(a);

            ArrayList<moves> Move = Move(temp, new Board(Checker));
            for (moves m : Move) {
                Board TT = new Board(Checker);
                Checker.Occupied[m.x][m.y] = 2;
                Checker.Occupied[a.row][a.column] = 0;
                int x = a.row;
                int y = a.column;
                a.row = m.x;
                a.column = m.y;
                int pre = a.king;
                if (m.x == 7) {
                    a.king = 1;
                    a.up = 1;
                }
                int v = Max(alpha, beta, depth - 1, new Board(Checker));

                Checker = TT;

                if (v < alpha) {
                    return Integer.MIN_VALUE;
                }
                if (v < value) {
                    value = v;

                }
                beta = Integer.min(beta, value);
            }
            ArrayList<moves> kill = Kill(temp, new Board(Checker));
            for (moves m : kill) {
                Board TT = new Board(Checker);
                Checker.Occupied[m.x][m.y] = 2;
                Checker.Occupied[a.row][a.column] = 0;
                int dx = (a.row + m.x) / 2;
                int dy = (a.column + m.y) / 2;
                Checker.Occupied[dx][dy] = 0;

                Piece deleted = deletePiece(dx, dy, Checker.Team1);
                int x = a.row;
                int y = a.column;
                a.row = m.x;
                a.column = m.y;
                int pre = a.king;
                if (m.x == 7) {
                    a.king = 1;
                    a.up = 1;
                }
                int v = Max(alpha, beta, depth - 1, new Board(Checker));

                Checker = TT;
                if (v < alpha) {
                    return Integer.MIN_VALUE;
                }
                if (v < value) {
                    value = v;

                }
                beta = Integer.min(beta, value);
            }

        }
        return value;

    }

    public int Max(int alpha, int beta, int depth, Board Checker) {
        System.out.println("MAX");
        if (depth <= 0) {
            return Heuristic(new Board(Checker));
        }
        int value = Integer.MIN_VALUE;
        for (Piece a : Checker.Team1) {
            Piece temp = new Piece(a);

            ArrayList<moves> Move = Move(temp, new Board(Checker));
            for (moves m : Move) {
                Board TT = new Board(Checker);
                Checker.Occupied[m.x][m.y] = 1;
                Checker.Occupied[a.row][a.column] = 0;
                int x = a.row;
                int y = a.column;
                a.row = m.x;
                a.column = m.y;
                int pre = a.king;
                if (m.x == 7) {
                    a.king = 1;
                    a.up = 1;
                }
                int v = Min(alpha, beta, depth - 1, new Board(Checker));

                Checker = TT;

                if (v > beta) {
                    return Integer.MAX_VALUE;
                }
                if (v > value) {
                    value = v;

                }
                alpha = Integer.max(alpha, value);
            }
            ArrayList<moves> kill = Kill(temp, new Board(Checker));
            for (moves m : kill) {
                Board TT = new Board(Checker);
                Checker.Occupied[m.x][m.y] = 1;
                Checker.Occupied[a.row][a.column] = 0;
                int dx = (a.row + m.x) / 2;
                int dy = (a.column + m.y) / 2;
                Checker.Occupied[dx][dy] = 0;

                Piece deleted = deletePiece(dx, dy, Checker.Team2);
                int x = a.row;
                int y = a.column;
                a.row = m.x;
                a.column = m.y;
                int pre = a.king;
                if (m.x == 7) {
                    a.king = 1;
                    a.up = 1;
                }
                int v = Min(alpha, beta, depth - 1, new Board(Checker));

                Checker = TT;

                if (v > beta) {  //pruning
                    return Integer.MAX_VALUE;
                }
                if (v > value) {
                    value = v;

                }
                alpha = Integer.max(alpha, value);
            }

        }
        return value;

    }

    public ArrayList<Piece> BestMoveRed(Board Checker) {

        int value = Integer.MIN_VALUE;
        int alpha = Integer.MIN_VALUE;
        int beta = Integer.MAX_VALUE;
        ArrayList<Piece> PF = new ArrayList<>();
        for (Piece a : Checker.Team1) {
            Piece temp = new Piece(a);

            ArrayList<moves> Move = Move(temp, new Board(Checker));
            for (moves m : Move) {

                Board TT = new Board(Checker);
                Checker.Occupied[m.x][m.y] = 1;
                Checker.Occupied[a.row][a.column] = 0;
                a.row = m.x;
                a.column = m.y;
                int pre = a.king;
                if (m.x == 7) {
                    a.king = 1;
                    a.up = 1;
                }
                int v = Min(alpha, beta, 4, new Board(Checker));
                if (v > value) {
                    PF.clear();
                    PF.add(temp);
                    PF.add(new Piece(a));
                    value = v;

                }
                alpha = Integer.max(alpha, v);
                Checker = TT;

            }
            ArrayList<moves> kill = Kill(temp, new Board(Checker));
            for (moves m : kill) {
                Board TT = new Board(Checker);
                Checker.Occupied[m.x][m.y] = 1;
                Checker.Occupied[a.row][a.column] = 0;
                int dx = (a.row + m.x) / 2;
                int dy = (a.column + m.y) / 2;
                Checker.Occupied[dx][dy] = 0;

                Piece deleted = deletePiece(dx, dy, Checker.Team2);
                int x = a.row;
                int y = a.column;
                a.row = m.x;
                a.column = m.y;
                int pre = a.king;
                if (m.x == 7) {
                    a.king = 1;
                    a.up = 1;
                }
                int v = Min(alpha, beta, 4, new Board(Checker));
                Checker = TT;
                if (v > value) {
                    PF.clear();
                    PF.add(temp);
                    PF.add(new Piece(a));
                    value = v;

                }
                alpha = Integer.max(alpha, v);

            }

        }
        System.out.println(PF.size());
        for (Piece a : PF) {
            System.out.println("AI Move " + a.row + " " + a.column);
        }
        return PF;

    }

    public Piece deletePiece(int a, int b, ArrayList<Piece> A) {

        int idx = 0;
        int flag = 0;
        for (Piece x : A) {
            if (x.row == a && x.column == b) {
                flag = 1;
                break;
            }
            idx++;
        }

        if (flag == 1) {

            System.out.println(A.get(idx).row + " " + A.get(idx).column + " " + A.get(idx).team + " " + A.get(idx).Position);
            Piece temp = new Piece(A.get(idx));
            A.remove(idx);
            return temp;

        }
        return null;

    }
    private void Checker_BoardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Checker_BoardMouseClicked
        // TODO add your handling code here:
        Message.setText("Checkers Game : Turn " + Mes[turn]);
        int col = evt.getX() / 50;
        int row = evt.getY() / 50;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                System.out.print(Checker.Occupied[i][j]);
            }
            System.out.println();
        }
        if (selected == 1 && Chosen != null) {

//            System.out.println(turn + " " + "Finfdin New position");
            if (Checker.Occupied[row][col] != 0) {
//                System.out.println("Kya be ");
                init();
                repaint();
            } else {
                int flag = 0;
                if (Chosen.Move != null) {
                    for (moves a : Chosen.Move) {
                        if (a.x == row && a.y == col) {
                            if (Chosen == null) {
//                                System.out.println("Bye");
                            }
                            Checker.Occupied[Chosen.row][Chosen.column] = 0;
                            Checker.Occupied[a.x][a.y] = turn + 1;
                            Chosen.row = a.x;
                            Chosen.column = a.y;
                            if (turn == 0) {
                                if (a.x == 7) {
                                    Chosen.up = 1;
                                    Chosen.down = 1;
                                    Chosen.king = 1;
                                }
                            }
                            if (turn == 1) {
                                if (a.x == 0) {
                                    Chosen.up = 1;
                                    Chosen.down = 1;
                                    Chosen.king = 1;
                                }
                            }

                            turn = 1 - turn;

                            flag = 1;
                            break;
                        }
                    }
                }
                if (Chosen.Kill != null) {
                    for (moves a : Chosen.Kill) {

                        if (a.x == row && a.y == col) {
                            if (Chosen == null) {
//                                System.out.println("Bye");
                            }
                            int dx = (a.x + Chosen.row) / 2;
                            int dy = (a.y + Chosen.column) / 2;
                            Checker.Occupied[Chosen.row][Chosen.column] = 0;
                            Checker.Occupied[dx][dy] = 0;
                            Checker.Occupied[a.x][a.y] = turn + 1;
                            Chosen.row = a.x;
                            Chosen.column = a.y;
                            if (turn == 0) {
                                if (a.x == 7) {
                                    Chosen.up = 1;
                                    Chosen.down = 1;
                                    Chosen.king = 1;
                                }
                            }
                            if (turn == 1) {
                                if (a.x == 0) {
                                    Chosen.up = 1;
                                    Chosen.down = 1;
                                    Chosen.king = 1;
                                }
                            }
                            System.out.println(Checker.Team1.indexOf(new moves(dx, dy)));
                            System.out.println(Checker.Team2.indexOf(new moves(dx, dy)));
                            deletePiece(dx, dy, Checker.Team1);
                            deletePiece(dx, dy, Checker.Team2);

                            flag = 1;
                            init();
                            repaint();
                            if (flag == 1) {

                                turn = 1 - turn;

                            }
                            break;
                        }

                    }
                }

                init();
                repaint();

                System.out.println("Finish");
            }
        } else {
            init();
//            System.out.println("asd");
            System.out.println(turn + " " + Checker.Occupied[row][col] + row + " " + col);
            if (Checker.Occupied[row][col] != turn + 1) {
//                System.out.println("Niklo ");
                init();
                repaint();
            } else {

                selected = 1;
                if (turn == 0) {
                    for (Piece a : Checker.Team1) {
                        if (a.row == row && a.column == col) {
                            Chosen = a;
                            break;
                        }
                    }
                } else {

                    for (Piece a : Checker.Team2) {
                        if (a.row == row && a.column == col) {
                            Chosen = a;
                            break;
                        }
                    }
                }
                System.out.println(Chosen);
                if (Chosen == null) {
                    init();
                } else {
                    selected = 1;
                    Chosen.Move = Move(Chosen, Checker);
                    Chosen.Kill = Kill(Chosen, Checker);
//                    System.out.println("Moves");
//                    for (moves a : Chosen.Move) {
//                        System.out.println(a.x + " " + a.y);
//                    }
//                    System.out.println("Kill");
//                    for (moves a : Chosen.Kill) {
//                        System.out.println(a.x + " " + a.y);
//                    }
                }
                repaint();

            }

        }

    }//GEN-LAST:event_Checker_BoardMouseClicked

    private void AI_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AI_ButtonActionPerformed
        // TODO add your handling code here:
        if (turn == 0) {
            ArrayList<Piece> PF = BestMoveRed(new Board(Checker));
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    System.out.print(Checker.Occupied[i][j]);
                }
                System.out.println();
            }

            if (PF.size() == 0) {

            } else {
                selected = 1;
                Chosen = PF.get(0);
                for (Piece a : Checker.Team1) {
                    if (a.row == Chosen.row && Chosen.column == a.column) {
                        Chosen = a;
                        Chosen.Kill = Kill(Chosen, Checker);
                        Chosen.Move = Move(Chosen, Checker);
                        break;

                    }
                }
                repaint();
//                try {
//
//                } catch (InterruptedException ex) {
//                    Logger.getLogger(Design.class.getName()).log(Level.SEVERE, null, ex);
//                }
                Piece Target = PF.get(1);
                System.out.println(Chosen.row + " " + Chosen.column);
                System.out.println(Target.row + " " + Target.column);
                int x = Target.row;
                int y = Target.column;

                int dx = (x + Chosen.row) / 2;
                int dy = (y + Chosen.column) / 2;
                System.out.println(dx + " " + dy);
                Checker.Occupied[Chosen.row][Chosen.column] = 0;
                if ((x - Chosen.row == 2) || (x - Chosen.row) == -2) {
                    System.out.println("AI deleted Some thing");
                    Checker.Occupied[dx][dy] = 0;
                }

                if (turn == 0) {
                    if (x == 7) {
                        Chosen.up = 1;
                        Chosen.down = 1;
                        Chosen.king = 1;
                    }
                }

//                    System.out.println(Checker.Team1.indexOf(new moves(dx, dy)));
//                    System.out.println(Checker.Team2.indexOf(new moves(dx, dy)));
                if ((x - Chosen.row) == 2 || (x - Chosen.row) == -2) {
                    System.out.println("AI deleted Some thing");
                    deletePiece(dx, dy, Checker.Team1);
                    deletePiece(dx, dy, Checker.Team2);
                }
                Checker.Occupied[x][y] = turn + 1;
                Chosen.row = x;
                Chosen.column = y;
                turn = 1 - turn;
                init();
                repaint();

                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        System.out.print(Checker.Occupied[i][j]);
                    }
                    System.out.println();
                }
            }
        } else {
            this.setEnabled(false);
        }
    }//GEN-LAST:event_AI_ButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        init();
        repaint();// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Design().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AI_Button;
    private javax.swing.JPanel Checker_Board;
    private javax.swing.JLabel Message;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
